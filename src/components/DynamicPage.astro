---
// Composant de page dynamique réutilisable
import Layout from '../layouts/Layout.astro';
import { pageConfig } from '../lib/routing.ts';

// Composants Oveco - Import statique optimisé
import {
  Autoconstruction,
  WorksHero,
  Contact,
  Hero,
  Expertise,
  Stats,
  Competences,
  Certifications,
  Gallerie,
  TextImage,
  Projects,
  Testimonials,
  SimpleCompetence,
  Partners,
  Footer,
} from '../components';

import SearchWorks from '../components/SearchWorks.astro';
import WorksGrid from '../components/WorksGrid.astro';

import { client } from '../../tina/__generated__/client';
import LiveBridge from '../../tina/LiveBridge.tsx';
import { getAllProjects, projectToCard } from '../lib/projects.ts';
import { cache } from '../lib/cache.ts';

export interface Props {
  title?: string;
  description?: string;
  jsonFile?: string;
  lang?: string;
}

const { title, description, jsonFile, lang = 'fr' } = Astro.props;
const currentJson = (jsonFile || 'home');

// Fonction pour charger les données JSON
async function loadPageData(jsonFile: string, lang: string = 'fr') {
  try {
    // Essayer d'abord avec la langue spécifique
    try {
      const module = await import(`../../content/${lang}/${jsonFile}.json`);
      return module.default;
    } catch {
      // Fallback vers le fichier de base
      const module = await import(`../../content/${jsonFile}.json`);
      return module.default;
    }
  } catch (e) {
    console.error(`Erreur lors du chargement de ${jsonFile}.json:`, e);
    return null;
  }
}

// Charger les données JSON avec cache
const pageData = await cache.getPageData(jsonFile || 'home', lang);
const pageContent = pageData || {};
const sections = pageContent.sections || [];

// Charger les projets dynamiquement pour la page home avec cache
let dynamicProjects: any[] = [];
if (currentJson === 'home') {
  try {
    const allProjects = await cache.getProjects();
    dynamicProjects = allProjects.map(projectToCard);
  } catch (e) {
    console.error('Erreur lors du chargement des projets:', e);
  }
}

// Titre et description par défaut
const pageTitle = title || pageContent.title || "Oveco - Auto-construction et Rénovation Écologique";
const pageDescription = description || pageContent.description || "Oveco accompagne vos projets d'auto-construction et de rénovation écologique. Expertise en maisons passives et énergies renouvelables.";

// Configuration TinaCMS (pour toutes les pages)
// En production, activer avec ?live=1 dans l'URL ou via l'admin
const forceLive = (
  import.meta.env.DEV || 
  Astro.url.searchParams.get('live') === '1' || 
  import.meta.env.PUBLIC_TINA_LIVE === '1' ||
  import.meta.env.PUBLIC_TINA_CLIENT_ID !== undefined
);
let tinaData: any = null;

// Toujours essayer de charger les données TinaCMS si configuré
let queryName = 'home';
if (forceLive) {
  try {
    // Vérifier que le client est correctement initialisé
    if (!client || !client.queries) {
      throw new Error('TinaCMS client not initialized');
    }

    const file = `${currentJson}.json`;
    
    // Mapper les fichiers JSON vers les queries TinaCMS
    const queryMap: Record<string, Record<string, string>> = {
      home: { fr: 'home', en: 'homeEn' },
      about: { fr: 'about_fr', en: 'about_en' },
      construction: { fr: 'construction_fr', en: 'construction_en' },
      works: { fr: 'works_fr', en: 'works_en' },
      competences: { fr: 'competences_fr', en: 'competences_en' },
    };
    
    const isSupported = !!queryMap[currentJson];
    if (!isSupported) {
      // Page non supportée par Tina (ex: works, competences en tant que pages) → on reste en statique
      tinaData = null;
      throw new Error(`Tina query not supported for jsonFile: ${currentJson}`);
    }

    queryName = (queryMap[currentJson] && queryMap[currentJson][lang]) || (lang === 'en' ? 'homeEn' : 'home');
    
    // Vérifier que la query existe dans le client
    if (!client.queries[queryName]) {
      throw new Error(`TinaCMS query "${queryName}" not found in client.queries`);
    }
    
    // Utiliser la query appropriée
    if (queryName === 'homeEn') {
      tinaData = await client.queries.homeEn({ relativePath: file });
    } else if (queryName === 'about_fr') {
      tinaData = await client.queries.about_fr({ relativePath: file });
    } else if (queryName === 'about_en') {
      tinaData = await client.queries.about_en({ relativePath: file });
    } else if (queryName === 'construction_fr') {
      tinaData = await client.queries.construction_fr({ relativePath: file });
    } else if (queryName === 'construction_en') {
      tinaData = await client.queries.construction_en({ relativePath: file });
    } else if (queryName === 'works_fr') {
      tinaData = await client.queries.works_fr({ relativePath: file });
    } else if (queryName === 'works_en') {
      tinaData = await client.queries.works_en({ relativePath: file });
    } else if (queryName === 'competences_fr') {
      tinaData = await client.queries.competences_fr({ relativePath: file });
    } else if (queryName === 'competences_en') {
      tinaData = await client.queries.competences_en({ relativePath: file });
    } else {
      tinaData = await client.queries.home({ relativePath: file });
    }
  } catch (e) {
    console.error('TinaCMS query error:', e);
    console.log('Query name:', queryName, 'File:', file);
    // Même si la requête échoue, créer un objet de fallback avec les données statiques
    // pour que le LiveBridge puisse au moins détecter les éléments avec data-bind
    if (forceLive && import.meta.env.PUBLIC_TINA_CLIENT_ID && queryName) {
      // Créer un fallback avec les données statiques pour permettre le mode Live
      // Générer les __typename corrects selon la collection
      const getTypename = (template: string, queryName: string) => {
        const templateCapitalized = (template || '').charAt(0).toUpperCase() + (template || '').slice(1);
        const collectionPrefix = queryName
          .split('_')
          .map((part, i) => i === 0 ? part.charAt(0).toUpperCase() + part.slice(1) : part)
          .join('_')
          .replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
        return `${collectionPrefix}Sections${templateCapitalized}`;
      };
      
      tinaData = {
        data: {
          [queryName]: {
            ...pageContent,
            sections: sections.map((s: any) => ({
              ...s,
              __typename: getTypename(s._template || '', queryName)
            }))
          }
        },
        query: '',
        variables: {}
      };
    } else {
      // En mode non-live ou sans client ID, ne pas charger LiveBridge
      tinaData = null;
    }
  }
}
---

<Layout title={pageTitle} description={pageDescription}>
  {/* LiveBridge est maintenant chargé dans Layout pour toutes les pages */}
  {/* Donc on ne le charge plus ici pour éviter les doublons */}
  
  {sections.map((section: any, index: number) => {
    const typename = section?.__typename || '';
    const rawTemplate = section?._template || typename.replace('HomeSections', '');
    const template = (rawTemplate || '').toString().trim().replace(/\s+/g, '').toLowerCase();
    
    // Debug pour la page works
    if (currentJson === 'works' && index === 0) {
      console.log('[DynamicPage] Template:', template, 'Raw:', rawTemplate, 'Section:', section._template);
    }

    // ========== Composants Oveco avec rendu optimisé ==========
    
    if (template === 'autoconstruction') {
      return (
        <Autoconstruction
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          services={section.services}
          ctaLabel={section.ctaLabel}
          ctaHref={section.ctaHref}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'workshero' || template === 'works-hero') {
      // Si c'est la page works, toujours ajouter SearchWorks et WorksGrid après le premier worksHero
      const isWorksPage = currentJson === 'works';
      // Trouver l'index du premier worksHero
      let firstWorksHeroIndex = -1;
      for (let i = 0; i < sections.length; i++) {
        const s = sections[i];
        const sTemplate = (s._template || '').toString().trim().replace(/\s+/g, '').toLowerCase();
        if (sTemplate === 'workshero' || sTemplate === 'works-hero') {
          firstWorksHeroIndex = i;
          break;
        }
      }
      const isFirstWorksHero = isWorksPage && firstWorksHeroIndex === index;
      
      return (
        <>
          <WorksHero
            subtitle={section.subtitle}
            title={section.title}
            description={section.description}
            ctaLabel={section.ctaLabel}
            ctaHref={section.ctaHref}
            sectionIndex={index}
            mediaLeft={section.mediaLeft}
            mediaRight={section.mediaRight}
          />
          {isFirstWorksHero && (
            <>
              <SearchWorks />
              <WorksGrid />
            </>
          )}
        </>
      );
    }

    if (template === 'hero') {
      return (
        <Hero
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          ctaText={section.ctaText}
          ctaUrl={section.ctaUrl}
          images={section.images}
          sectionIndex={index}
        />
      );
    }
    
    
    if (template === 'expertise') {
      return (
        <Expertise
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          cards={section.cards}
          ctaLabel={section.ctaLabel}
          ctaHref={section.ctaHref}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'stats') {
      return (
        <Stats
          title={section.title}
          stats={section.stats}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'competences') {
      return (
        <Competences
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          competences={section.competences}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'certifications') {
      return (
        <Certifications
          title={section.title}
          description={section.description}
          cards={section.cards}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'gallerie') {
      return (
        <Gallerie
          subtitle={section.subtitle}
          title={section.title}
          gallery={section.gallery}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'textimage') {
      return (
        <TextImage
          sectionSubtitle={section.sectionSubtitle}
          sectionTitle={section.sectionTitle}
          sectionDescription={section.sectionDescription}
          showSectionHeader={section.showSectionHeader}
          sectionIndex={index}
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          link={section.link}
          image={section.image}
          reverse={section.reverse}
          duplicate={section.duplicate}
          subtitle2={section.subtitle2}
          title2={section.title2}
          description2={section.description2}
          link2={section.link2}
          image2={section.image2}
        />
      );
    }
    
    if (template === 'projects') {
      // Sur la page works, ne pas afficher la section Projects classique
      // Elle est remplacée par SearchWorks + WorksGrid
      if (currentJson === 'works') {
        return null;
      }
      
      // Utiliser les projets dynamiques pour la page home, sinon utiliser les cartes définies
      const cardsToUse = (currentJson === 'home' && dynamicProjects.length > 0) 
        ? dynamicProjects 
        : section.cards || [];
        
      return (
        <Projects
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          linkText={section.linkText}
          linkUrl={section.linkUrl}
          sectionIndex={index}
          cards={cardsToUse}
        />
      );
    }
    
    if (template === 'testimonials') {
      return (
        <Testimonials
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          linkText={section.linkText}
          linkUrl={section.linkUrl}
          sectionIndex={index}
          testimonials={section.testimonials || []}
        />
      );
    }
    
    if (template === 'simplecompetence') {
      return (
        <SimpleCompetence
          number={section.number}
          title={section.title}
          description={section.description}
          cta={section.cta}
          image={section.image}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'partners') {
      // Transformer les logos (avec .src) en format partners (avec .logo)
      const logosData = section.logos || section.partners || [];
      const partnersData = logosData.map((item: any) => ({
        logo: item.src || item.logo || '',
        alt: item.alt || '',
        name: item.name || ''
      }));
      
      return (
        <Partners
          subtitle={section.subtitle}
          title={section.title}
          description={section.description}
          partners={partnersData}
          sectionIndex={index}
        />
      );
    }
    
    if (template === 'footer') {
      return (
        <Footer
          copyrightYear={section.copyrightYear}
          companyName={section.companyName}
          legalText={section.legalText}
        />
      );
    }
    
    return null;
  })}

  <!-- Slot pour le contenu spécifique à la page -->
  <slot />
</Layout>
