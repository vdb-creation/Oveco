---
/**
 * Projects Section - Oveco
 * Section des projets avec grille responsive et navigation
 * 
 * @component
 * @tinacms Template : projects
 */

import Card from './Card.astro';

export interface Props {
  subtitle?: string;
  title: string;
  description?: string;
  linkText?: string;
  linkUrl?: string;
  cards?: Array<{
    image: string;
    type?: string;
    client?: string;
    title: string;
    url: string;
    description?: string;
  }>;
}

const { 
  subtitle = "Nos réalisations",
  title,
  description,
  linkText = "En savoir plus",
  linkUrl = "/works",
  cards = []
} = Astro.props;

// Sécuriser cards pour éviter les erreurs null/undefined
const safeCards = Array.isArray(cards) ? cards : [];

// ID unique pour l'accessibilité
const sectionId = 'projets';
const titleId = `${sectionId}-title`;
---

<section 
  class="projects-section" 
  id={sectionId}
  itemscope 
  itemtype="https://schema.org/ItemList"
>
  <div class="projects">
    <div class="projects__container">
      <header class="projects__header">
        <div class="projects__header-content">
          <p class="projects__subtitle">{subtitle}</p>
          <h2 class="projects__title" id={titleId} itemprop="name">{title}</h2>
          {description && (
            <p class="projects__description" itemprop="description">{description}</p>
          )}
          <a 
            href={linkUrl} 
            class="projects__link" 
            aria-label="Voir tous nos projets (page Réalisations)"
          >
            <span>{linkText}</span>
            <svg 
              class="projects__link-arrow" 
              width="10" 
              height="9" 
              viewBox="0 0 10 9" 
              fill="none" 
              xmlns="http://www.w3.org/2000/svg" 
              aria-hidden="true"
            >
              <path 
                d="M1 4.5H9M9 4.5L5.5 1M9 4.5L5.5 8" 
                stroke="#048B9A" 
                stroke-width="1.5" 
                stroke-linecap="round" 
                stroke-linejoin="round"
              />
            </svg>
          </a>
        </div>
        
        <div class="projects__navigation" role="navigation" aria-label="Navigation des projets">
          <button 
            class="projects__nav-btn projects__nav-btn--prev" 
            aria-label="Projet précédent" 
            type="button"
            data-scroll-dir="prev"
          >
            <svg 
              width="11" 
              height="21" 
              viewBox="0 0 11 21" 
              fill="none" 
              xmlns="http://www.w3.org/2000/svg" 
              aria-hidden="true"
            >
              <path 
                d="M10 1L1 10.5L10 20" 
                stroke="#FFFEF8" 
                stroke-width="2" 
                stroke-linecap="round" 
                stroke-linejoin="round"
              />
            </svg>
          </button>
          <button 
            class="projects__nav-btn projects__nav-btn--next" 
            aria-label="Projet suivant" 
            type="button"
            data-scroll-dir="next"
          >
            <svg 
              width="11" 
              height="21" 
              viewBox="0 0 11 21" 
              fill="none" 
              xmlns="http://www.w3.org/2000/svg" 
              aria-hidden="true"
            >
              <path 
                d="M1 1L10 10.5L1 20" 
                stroke="#FFFEF8" 
                stroke-width="2" 
                stroke-linecap="round" 
                stroke-linejoin="round"
              />
            </svg>
          </button>
        </div>
      </header>

      <div 
        class="projects__grid" 
        role="list" 
        aria-labelledby={titleId}
        data-projects-grid
      >
        {safeCards.length > 0 ? (
          safeCards.map((card) => (
            <Card {...card} />
          ))
        ) : (
          <p>Aucun projet n'a été ajouté</p>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  // Navigation du carrousel de projets sur mobile
  function initProjectsNavigation() {
    const grid = document.querySelector('[data-projects-grid]') as HTMLElement;
    if (!grid) return;

    const prevBtn = document.querySelector('.projects__nav-btn--prev') as HTMLButtonElement;
    const nextBtn = document.querySelector('.projects__nav-btn--next') as HTMLButtonElement;

    if (!prevBtn || !nextBtn) return;

    // Vérifier si on est en mode mobile (carrousel)
    const isMobile = () => window.innerWidth <= 480;

    if (isMobile()) {
      const scrollAmount = window.innerWidth * 0.8 + 14; // 80% width + gap

      prevBtn.addEventListener('click', () => {
        grid.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      });

      nextBtn.addEventListener('click', () => {
        grid.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      });

      // Drag to scroll
      let isDown = false;
      let startX: number;
      let scrollLeft: number;

      grid.addEventListener('mousedown', (e) => {
        isDown = true;
        grid.classList.add('is-grabbing');
        startX = e.pageX - grid.offsetLeft;
        scrollLeft = grid.scrollLeft;
      });

      grid.addEventListener('mouseleave', () => {
        isDown = false;
        grid.classList.remove('is-grabbing');
      });

      grid.addEventListener('mouseup', () => {
        isDown = false;
        grid.classList.remove('is-grabbing');
      });

      grid.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - grid.offsetLeft;
        const walk = (x - startX) * 2;
        grid.scrollLeft = scrollLeft - walk;
      });

      // Touch events
      grid.addEventListener('touchstart', (e) => {
        startX = e.touches[0].pageX - grid.offsetLeft;
        scrollLeft = grid.scrollLeft;
      });

      grid.addEventListener('touchmove', (e) => {
        const x = e.touches[0].pageX - grid.offsetLeft;
        const walk = (x - startX) * 2;
        grid.scrollLeft = scrollLeft - walk;
      });
    }
  }

  // Initialiser au chargement de la page
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProjectsNavigation);
  } else {
    initProjectsNavigation();
  }
</script>

<style lang="scss">
  @use '../assets/scss/astro-components' as *;
  @use '../assets/scss/components/_projects' as *;
</style>
