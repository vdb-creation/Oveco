---
/**
 * Hero Component - Oveco
 * Section héro avec images et cercle suiveur de souris
 * 
 * @component
 */

export interface HeroProps {
  subtitle?: string;
  title: string;
  description?: string;
  ctaText?: string;
  ctaUrl?: string;
  images?: Array<{
    src: string;
    alt: string;
    class?: string;
  }>;
  sectionIndex?: number;
}

const {
  subtitle = "oveco",
  title,
  description = "Des ingénieurs-installateurs qui conçoivent et réalisent votre projet sur mesure.",
  ctaText = "Nous contacter",
  ctaUrl = "#contact",
  sectionIndex = 0,
  images = [
    {
      src: "/uploads/hero/maison-build.png",
      alt: "Maison avec toiture énergétique",
      class: "hero__image hero__image--large-1"
    },
    {
      src: "/uploads/hero/maison-build.png", 
      alt: "Installation énergétique",
      class: "hero__image hero__image--large-2"
    },
    {
      src: "/uploads/hero/maison-build.png",
      alt: "Construction énergétique", 
      class: "hero__image hero__image--medium-1"
    },
    {
      src: "/uploads/hero/maison-build.png",
      alt: "Réalisation énergétique",
      class: "hero__image hero__image--medium-2"
    }
  ]
} = Astro.props;

function mapImageClassAndId(image: { class?: string }, index: number) {
  const raw = (image.class || '').toLowerCase().trim();
  let positionNumber: number | null = null;
  if (raw === 'image 1' || raw === 'image1') positionNumber = 1;
  if (raw === 'image 2' || raw === 'image2') positionNumber = 2;
  if (raw === 'image 3' || raw === 'image3') positionNumber = 3;
  if (raw === 'image 4' || raw === 'image4') positionNumber = 4;

  // Fallback to index order if Tina class not set
  const num = positionNumber ?? (index + 1);

  // Map numbers to internal size modifiers
  const sizeClass = (num === 1)
    ? 'large-1'
    : (num === 2)
    ? 'large-2'
    : (num === 3)
    ? 'medium-1'
    : 'medium-2';

  return {
    id: `img${num}`,
    className: `hero__image hero__image--${sizeClass}`
  };
}
---

<div class="home-page">
  <section class="hero" role="banner" aria-labelledby="hero-title">
    <!-- Cercle suiveur de souris -->
    <div class="hero__mouse-follower" id="mouseFollower" aria-hidden="true"></div>
    
    <div class="container">
      <div class="hero__container">
        {images && images.length > 0 && images.map((image: { src: string; alt: string; class?: string }, index: number) => {
          const mapped = mapImageClassAndId(image, index);
          return (
            <img 
              src={image.src} 
              alt={image.alt} 
              loading={index === 0 ? "eager" : "lazy"}
              decoding="async"
              class={mapped.className}
              id={mapped.id}
              width="400"
              height="500"
              fetchpriority={index === 0 ? "high" : "low"}
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 25vw"
              srcset={`
                ${image.src.replace(/\.(jpg|jpeg|png)$/, '.opt.webp')} 400w,
                ${image.src.replace(/\.(jpg|jpeg|png)$/, '.opt.avif')} 400w
              `}
            />
          );
        })}
        
        <div class="hero__content">
          <header class="hero__header">
            <p class="hero__subtitle" data-bind={`sections.${sectionIndex}.hero.subtitle`} aria-label="Sous-titre">{subtitle}</p>
            <h1 class="hero__title" id="hero-title" data-bind={`sections.${sectionIndex}.hero.title`}>{title}</h1>
          </header>
          <p class="hero__description" data-bind={`sections.${sectionIndex}.hero.description`}>{description}</p>
          <a href={ctaUrl} class="hero__cta" role="button" data-bind={`sections.${sectionIndex}.hero.ctaUrl`} aria-label={`${ctaText} - ${title}`}>
            <span data-bind={`sections.${sectionIndex}.hero.ctaText`}>{ctaText}</span>
          </a>
        </div>
      </div>
    </div>
  </section>
</div>

<script>
/**
 * Initialize mouse follower circle for hero section
 */
function initMouseFollower() {
  const follower = document.getElementById('mouseFollower') as HTMLElement;
  const heroSection = document.querySelector('.hero') as HTMLElement;

  if (!follower || !heroSection) return;

  // Ensure CSS transform centers the circle
  follower.style.transform = 'translate(-50%, -50%)';

  let targetX = 0;
  let targetY = 0;
  let currentX = 0;
  let currentY = 0;
  let insideHero = false;

  // Aucun snapping à la grille: mouvement fluide directement sous la souris
  const ease = 0.15; // smoothing factor

  function animate() {
    // ease towards the target
    currentX += (targetX - currentX) * ease;
    currentY += (targetY - currentY) * ease;

    // apply as left/top relative to hero (keeps center via translate(-50%, -50%))
    follower.style.left = currentX + 'px';
    follower.style.top = currentY + 'px';

    // show/hide based on whether mouse is inside hero and viewport is desktop
    if (window.innerWidth > 768 && insideHero) {
      if (follower.style.opacity !== '1') follower.style.opacity = '1';
    } else {
      if (follower.style.opacity !== '0') follower.style.opacity = '0';
    }

    requestAnimationFrame(animate);
  }

  // Run animation loop
  animate();

  // Écoute uniquement dans le hero, mouvement fluide
  heroSection.addEventListener('mousemove', (e: MouseEvent) => {
    const rect = heroSection.getBoundingClientRect();
    const relX = e.clientX - rect.left; // position relative au hero
    const relY = e.clientY - rect.top;

    insideHero = relX >= 0 && relX <= rect.width && relY >= 0 && relY <= rect.height;

    if (!insideHero) return;
    targetX = relX;
    targetY = relY;
  }, { passive: true });

  // Hide on resize for small screens
  window.addEventListener('resize', () => {
    if (window.innerWidth <= 768) {
      follower.style.opacity = '0';
    }
  });
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initMouseFollower);
} else {
  initMouseFollower();
}
</script>

<style>
/* CSS optimisé pour Lighthouse - Hero section */
.hero {
  position: relative;
  min-height: 100vh;
  min-height: 100dvh; /* Dynamic viewport height pour mobile */
  background-image: url("/src/assets/imgs/BgHome.svg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  padding: clamp(2rem, 5vw, 6rem) clamp(1rem, 3vw, 2rem);
  /* Optimisations performance */
  will-change: transform;
  contain: layout style paint;
}

@media (max-width: 1200px) {
  .hero {
    padding: 5rem 1.5rem;
  }
}

@media (max-width: 768px) {
  .hero {
    padding: 4rem 1.5rem;
    min-height: 80vh;
  }
  
  /* Afficher une seule image sur mobile */
  .hero #img1 {
    display: block;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: clamp(200px, 70vw, 320px);
    height: auto;
    max-height: 65vh;
    z-index: 1;
  }
}

@media (max-width: 480px) {
  .hero {
    min-height: 70vh;
    padding: 3rem 1rem;
  }
  
  .hero #img1 {
    width: clamp(180px, 70vw, 240px);
    height: clamp(220px, 80vw, 280px);
  }
}

.hero__container {
  position: static;
  z-index: 2;
  width: 100%;
  max-width: 1280px;
  display: flex;
  align-items: center;
  justify-content: center;
  padding-inline: clamp(16px, 4vw, 80px);
}

/* Cercle suiveur de souris */
.hero__mouse-follower {
  position: absolute;
  width: 120px;
  height: 120px;
  background: radial-gradient(circle at 50% 50%, rgba(4,139,154,0.28), rgba(4,139,154,0.10) 60%, rgba(4,139,154,0.0) 70%);
  border-radius: 50%;
  pointer-events: none;
  z-index: 0;
  transform: translate(-50%, -50%);
  transition: opacity 0.2s ease;
  opacity: 0;
  will-change: transform, opacity;
  mix-blend-mode: normal;
  left: 50%;
  top: 50%;
  filter: blur(6px);
  box-shadow: 0 0 24px rgba(4, 139, 154, 0.22), 0 0 48px rgba(4, 139, 154, 0.12);
}

@media (max-width: 1200px) {
  .hero__mouse-follower {
    width: 100px;
    height: 100px;
    filter: blur(5px);
  }
}

@media (max-width: 768px) {
  .hero__mouse-follower {
    width: 90px;
    height: 90px;
    filter: blur(4px);
  }
}

@media (max-width: 480px) {
  .hero__mouse-follower {
    display: none;
  }
}

/* Positionnement des 4 images - ajusté selon le design */
.hero #img1 {
  left: clamp(20px, 5vw, 80px);
  top: clamp(80px, 12vh, 160px);
  z-index: 1;
}

@media (max-width: 768px) {
  .hero #img1 {
    display: none;
  }
}

.hero #img2 {
  right: clamp(20px, 5vw, 80px);
  top: clamp(80px, 12vh, 160px);
  z-index: 1;
}

@media (max-width: 768px) {
  .hero #img2 {
    display: none;
  }
}

.hero #img3 {
  left: clamp(40px, 8vw, 120px);
  bottom: clamp(60px, 10vh, 140px);
  z-index: 1;
}

@media (max-width: 768px) {
  .hero #img3 {
    display: none;
  }
}

.hero #img4 {
  right: clamp(40px, 8vw, 120px);
  bottom: clamp(60px, 10vh, 140px);
  z-index: 1;
}

@media (max-width: 768px) {
  .hero #img4 {
    display: none;
  }
}

/* Écrans moyens */
@media (min-width: 769px) and (max-width: 1200px) {
  .hero #img1 { left: clamp(24px, 6vw, 80px); top: clamp(48px, 9vh, 110px); }
  .hero #img2 { right: clamp(24px, 6vw, 80px); top: clamp(48px, 9vh, 110px); }
  .hero #img3 { left: clamp(36px, 7vw, 100px); bottom: clamp(40px, 7vh, 90px); }
  .hero #img4 { right: clamp(36px, 7vw, 100px); bottom: clamp(40px, 7vh, 90px); }
}

/* Très grands écrans */
@media (min-width: 1400px) {
  .hero #img1 {
    left: 100px;
    top: 180px;
  }
  
  .hero #img2 {
    right: 100px;
    top: 180px;
  }
  
  .hero #img3 {
    left: 140px;
    bottom: 160px;
  }
  
  .hero #img4 {
    right: 140px;
    bottom: 160px;
  }
}

.hero__image {
  position: absolute;
  overflow: hidden;
  border-radius: 30px;
  z-index: 1;
  object-fit: cover;
  transition: none;
  /* Optimisations performance avancées */
  will-change: transform;
  transform: translateZ(0); /* Force GPU acceleration */
  contain: layout style paint;
  /* Prévention du layout shift */
  aspect-ratio: 4/5;
  /* Optimisations de rendu */
  image-rendering: optimizeQuality;
  image-rendering: -webkit-optimize-contrast;
  /* Support des formats modernes */
  image-rendering: crisp-edges;
  max-width: 36vw;
  max-height: 50vh;
  user-select: none;
  -webkit-user-select: none;
  pointer-events: none;
}

@media (max-width: 768px) {
  .hero__image {
    display: none;
  }
  
  .hero #img1 {
    display: block;
  }
}

.hero__image--large-1,
.hero__image--large-2 {
  width: clamp(280px, 22vw, 380px);
  height: clamp(350px, 28vw, 450px);
  /* Optimisations performance avancées */
  will-change: transform;
  transform: translateZ(0); /* Force GPU acceleration */
  contain: layout style paint;
  /* Prévention du layout shift */
  aspect-ratio: 4/5;
  /* Optimisations de rendu */
  image-rendering: optimizeQuality;
  image-rendering: -webkit-optimize-contrast;
  /* Support des formats modernes */
  image-rendering: crisp-edges;
}

.hero__image--medium-1,
.hero__image--medium-2 {
  width: clamp(240px, 20vw, 320px);
  height: clamp(220px, 18vw, 280px); /* Augmenté de 180px à 220px */
  /* Optimisations performance avancées */
  will-change: transform;
  transform: translateZ(0); /* Force GPU acceleration */
  contain: layout style paint;
  /* Prévention du layout shift */
  aspect-ratio: 4/3;
  /* Optimisations de rendu */
  image-rendering: optimizeQuality;
  image-rendering: -webkit-optimize-contrast;
  /* Support des formats modernes */
  image-rendering: crisp-edges;
}

.hero__content {
  width: min(656px, 100%);
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  gap: clamp(0.75rem, 2vw, 1.125rem);
  z-index: 3;
  padding-inline: clamp(0.75rem, 3vw, 1.5rem);
  max-width: clamp(320px, 90vw, 720px);
}

.hero__content::before {
  content: "";
  width: 334px;
  height: 334px;
  left: -92px;
  top: 369px;
  position: absolute;
  opacity: 0.4;
  background: #334749;
  box-shadow: 531.3636474609px 531.3636474609px 531.3636474609px;
  border-radius: 9999px;
  filter: blur(265.68px);
  z-index: -1;
}

@media (max-width: 1023px) {
  .hero__content::before {
    display: none;
  }
}

.hero__header {
  align-self: stretch;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  gap: 0.375rem;
}

.hero__subtitle {
  font-family: "Nunito Sans Variable", "Nunito Sans", system-ui, -apple-system, sans-serif;
  font-size: 1.125rem;
  font-weight: 700;
  line-height: 1.4;
  letter-spacing: 0.12rem;
  align-self: stretch;
  text-align: center;
  color: #5C6D6F;
  text-transform: uppercase;
  margin: 0;
}

.hero__title {
  font-family: "Nunito Sans Variable", "Nunito Sans", system-ui, -apple-system, sans-serif;
  font-size: 2.986rem;
  font-weight: 800;
  line-height: 1.2;
  align-self: stretch;
  text-align: center;
  color: #334749;
  margin: 0;
}

@media (max-width: 768px) {
  .hero__title {
    font-size: calc(2.986rem * 0.8);
  }
}

@media (max-width: 480px) {
  .hero__title {
    font-size: calc(2.986rem * 0.65);
  }
}

.hero__description {
  font-family: "Nunito Sans Variable", "Nunito Sans", system-ui, -apple-system, sans-serif;
  font-size: 1.125rem;
  font-weight: 400;
  line-height: 1.4;
  align-self: stretch;
  text-align: center;
  color: #5C6D6F;
  margin: 0;
}

.hero__cta {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 18px 30px;
  background: #334749;
  border-radius: 30px;
  color: #FFFEF8;
  font-size: 19.2px;
  font-family: "Nunito Sans", sans-serif;
  font-weight: 700;
  line-height: 23.04px;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  border: none;
  transition: background 0.3s ease, transform 0.3s ease;
}

.hero__cta:hover {
  background: #048B9A;
  transform: translateY(-2px);
}

@media (max-width: 480px) {
  .hero__cta {
    font-size: 16px;
    padding: 16px 24px;
  }
}
</style>